{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/react-js/Desktop/mcq/supabase/Supabase.ts"],"sourcesContent":["\nimport { createClient } from '@supabase/supabase-js'\n\n// Using environment variables for the remote Supabase instance\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || \"\"\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || \"\"\n\nexport const supabase = createClient(supabaseUrl, supabaseKey)\n\n// Authentication helper functions\nexport const signInWithEmail = async (email: string, password: string) => {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n  return { data, error }\n}\n\nexport const signUpWithEmail = async (email: string, password: string) => {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n  })\n  return { data, error }\n}\n\nexport const signInWithGoogle = async () => {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'google',\n    options: {\n      redirectTo: `${window.location.origin}/auth/callback`,\n    },\n  })\n  return { data, error }\n}\n\nexport const signOut = async () => {\n  const { error } = await supabase.auth.signOut()\n  return { error }\n}\n\nexport const getCurrentUser = async () => {\n  const { data, error } = await supabase.auth.getUser()\n  return { user: data?.user, error }\n}"],"names":[],"mappings":";;;;;;;;AACA;;AAEA,+DAA+D;AAC/D,MAAM,cAAc,gFAAwC;AAC5D,MAAM,cAAc,wPAA6C;AAE1D,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,kBAAkB,OAAO,OAAe;IACnD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;QAC7D;QACA;IACF;IACA,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,MAAM,kBAAkB,OAAO,OAAe;IACnD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;QACjD;QACA;IACF;IACA,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,MAAM,mBAAmB;IAC9B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,eAAe,CAAC;QAC1D,UAAU;QACV,SAAS;YACP,YAAY,GAAG,OAAO,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC;QACvD;IACF;IACA,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,MAAM,UAAU;IACrB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAC7C,OAAO;QAAE;IAAM;AACjB;AAEO,MAAM,iBAAiB;IAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IACnD,OAAO;QAAE,MAAM,MAAM;QAAM;IAAM;AACnC","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/react-js/Desktop/mcq/src/app/api/results/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { supabase } from '../../../../supabase/Supabase';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { \n      userId,\n      totalQuestions,\n      correctAnswers,\n      score,\n      timeTaken,\n      responses \n    } = body;\n\n    if (!userId) {\n      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });\n    }\n\n    // Create quiz attempt\n    const { data: resultData, error: resultError } = await supabase\n      .from('quiz_attempts')\n      .insert({\n        user_id: userId,\n        started_at: new Date().toISOString(), // Set the started_at timestamp\n        completed_at: new Date().toISOString(),\n        time_taken: timeTaken,\n        total_questions: totalQuestions,\n        correct_answers: correctAnswers,\n        score: score\n      })\n      .select()\n      .single();\n\n    if (resultError) {\n      console.error('Error saving result:', resultError);\n      return NextResponse.json(\n        { error: resultError.message || 'Error saving quiz result' },\n        { status: 500 }\n      );\n    }\n\n    // Store individual result responses\n    // const resultResponses = responses.map((response: any) => ({\n    //   result_id: resultData.id,\n    //   question_id: response.questionId,\n    //   user_answer: response.answer,\n    //   is_correct: response.isCorrect\n    // }));\n\n    // const { error: responsesError } = await supabase\n    //   .from('result_responses')\n    //   .insert(resultResponses);\n\n    // if (responsesError) {\n    //   console.error('Error saving result responses:', responsesError);\n    //   throw responsesError;\n    // }\n\n    return NextResponse.json(resultData);\n  } catch (error) {\n    console.error('Error in results route:', error);\n    \n    let errorMessage = 'An error occurred while saving the quiz results';\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    } else if (typeof error === 'object' && error !== null) {\n      errorMessage = JSON.stringify(error);\n    }\n    \n    return NextResponse.json(\n      { \n        error: errorMessage,\n        details: error\n      }, \n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: Request) {\n  try {\n    const url = new URL(request.url);\n    const userId = url.searchParams.get('userId');\n\n    if (!userId) {\n      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });\n    }\n\n    const { data: results, error: resultsError } = await supabase\n      .from('quiz_attempts')\n      .select(`\n        *,\n        user_responses (\n          question_id,\n          user_answer,\n          is_correct\n        )\n      `)\n      .eq('user_id', userId)\n      .order('completed_at', { ascending: false });\n\n    if (resultsError) {\n      console.error('Error fetching results:', resultsError);\n      return NextResponse.json(\n        { error: resultsError.message || 'Error fetching quiz results' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(results);\n  } catch (error) {\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'An error occurred' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,MAAM,EACN,cAAc,EACd,cAAc,EACd,KAAK,EACL,SAAS,EACT,SAAS,EACV,GAAG;QAEJ,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,sBAAsB;QACtB,MAAM,EAAE,MAAM,UAAU,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CAC5D,IAAI,CAAC,iBACL,MAAM,CAAC;YACN,SAAS;YACT,YAAY,IAAI,OAAO,WAAW;YAClC,cAAc,IAAI,OAAO,WAAW;YACpC,YAAY;YACZ,iBAAiB;YACjB,iBAAiB;YACjB,OAAO;QACT,GACC,MAAM,GACN,MAAM;QAET,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,YAAY,OAAO,IAAI;YAA2B,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,8DAA8D;QAC9D,8BAA8B;QAC9B,sCAAsC;QACtC,kCAAkC;QAClC,mCAAmC;QACnC,OAAO;QAEP,mDAAmD;QACnD,8BAA8B;QAC9B,8BAA8B;QAE9B,wBAAwB;QACxB,qEAAqE;QACrE,0BAA0B;QAC1B,IAAI;QAEJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,IAAI,eAAe;QACnB,IAAI,iBAAiB,OAAO;YAC1B,eAAe,MAAM,OAAO;QAC9B,OAAO,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;YACtD,eAAe,KAAK,SAAS,CAAC;QAChC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;QAC/B,MAAM,SAAS,IAAI,YAAY,CAAC,GAAG,CAAC;QAEpC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,sHAAA,CAAA,WAAQ,CAC1D,IAAI,CAAC,iBACL,MAAM,CAAC,CAAC;;;;;;;MAOT,CAAC,EACA,EAAE,CAAC,WAAW,QACd,KAAK,CAAC,gBAAgB;YAAE,WAAW;QAAM;QAE5C,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,aAAa,OAAO,IAAI;YAA8B,GAC/D;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAoB,GACtE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}