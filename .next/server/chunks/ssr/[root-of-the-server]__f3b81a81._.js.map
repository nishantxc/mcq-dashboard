{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/react-js/Desktop/mcq/src/store/slices/userSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../../store/store'\nimport { User } from '../../types/types'\n\n\nconst initialState: User = { \n  id: '',\n  username: '', \n  avatar: '', \n  user_id: '', }\n\nexport const userProfileSlice = createSlice({\n  name: 'userProfile',\n  initialState,\n  reducers: {\n    adduserProfile: (state, action: PayloadAction<User>) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { adduserProfile } = userProfileSlice.actions;\n\nexport default userProfileSlice.reducer;"],"names":[],"mappings":";;;;;AAAA;;AAKA,MAAM,eAAqB;IACzB,IAAI;IACJ,UAAU;IACV,QAAQ;IACR,SAAS;AAAI;AAER,MAAM,mBAAmB,CAAA,GAAA,2LAAA,CAAA,cAAW,AAAD,EAAE;IAC1C,MAAM;IACN;IACA,UAAU;QACR,gBAAgB,CAAC,OAAO;YACtB,OAAO,OAAO,OAAO;QACvB;IACF;AACF;AAEO,MAAM,EAAE,cAAc,EAAE,GAAG,iBAAiB,OAAO;uCAE3C,iBAAiB,OAAO","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/react-js/Desktop/mcq/src/store/store.ts"],"sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit'\nimport userProfileReducer from './slices/userSlice'\nimport localStorage from 'redux-persist/lib/storage'\nimport { persistReducer, persistStore } from 'redux-persist'\n\nconst persistConfig = {\n  key:'root',\n  storage:localStorage,\n  whitelist: ['userProfile'],\n}\n\nconst rootReducer = combineReducers({\n    userProfile: userProfileReducer,\n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE']\n      },\n    }),\n})\n\nexport const persistor = persistStore(store)\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;;;;;AAEA,MAAM,gBAAgB;IACpB,KAAI;IACJ,SAAQ,2JAAA,CAAA,UAAY;IACpB,WAAW;QAAC;KAAc;AAC5B;AAEA,MAAM,cAAc,CAAA,GAAA,uIAAA,CAAA,kBAAe,AAAD,EAAE;IAChC,aAAa,mIAAA,CAAA,UAAkB;AACnC;AAEA,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,iBAAc,AAAD,EAAE,eAAe;AAEhD,MAAM,QAAQ,CAAA,GAAA,2LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;IACT,YAAY,CAAC,uBACX,qBAAqB;YACnB,mBAAmB;gBACjB,gBAAgB;oBAAC;oBAAmB;iBAAoB;YAC1D;QACF;AACJ;AAEO,MAAM,YAAY,CAAA,GAAA,iMAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///Users/react-js/Desktop/mcq/src/components/Providers.tsx"],"sourcesContent":["'use client';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistor, store } from '../store/store';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        {children}\n        <ToastContainer \n          position=\"bottom-center\" \n          hideProgressBar \n          newestOnTop \n          closeOnClick \n          draggable \n          pauseOnHover={false} \n        />\n      </PersistGate>\n    </Provider>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;;AAQe,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,qBACE,8OAAC,yJAAA,CAAA,WAAQ;QAAC,OAAO,qHAAA,CAAA,QAAK;kBACpB,cAAA,8OAAC,8JAAA,CAAA,cAAW;YAAC,SAAS;YAAM,WAAW,qHAAA,CAAA,YAAS;;gBAC7C;8BACD,8OAAC,sKAAA,CAAA,iBAAc;oBACb,UAAS;oBACT,eAAe;oBACf,WAAW;oBACX,YAAY;oBACZ,SAAS;oBACT,cAAc;;;;;;;;;;;;;;;;;AAKxB","debugId":null}}]
}